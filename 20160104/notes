- Accessibilité des composants
-SMACSS, BEM & SASS
- Responsive et Media queries
- Animation avec jQuery et Velocity

SMACSS Scalable and Modular Architecture for CSS

    une méthodologie pour organiser son CSS


    Le coeur de SMACSS est la categorisation. Il y a 5 types de categories:

    1. Base

    2. Mise en Page

    3. Module

    4. Etat

    5. Theme


    1. Base :

    Concerne les éléments de base html comme body ou h1 etc.

    Pour ces formes, il peut être utile d'utiliser des styles récurrents.

    Eviter le plus les CSS resets (des styles qui en annulent d'autres) ou savoir les utiliser à bon escient.


    body, form {

        margin: 0;

        padding: 0;

    }


    a {

        color: #039;

    }


    a:hover {

        color: #03F;    

    }


    2. Mise en page

    Concerne des éléments de type ID

    On définit en priorité la position des éléments.

    Lorsqu'une classe modifie la position, on la déclare avec l'ID correspondant


    .l-grid {

        margin: 0;

        padding: 0;

        list-style-type: none;

    }


    .l-grid > li {

        display: inline-block;

        margin: 0 0 10px 10px; 

        

        /* IE7 hack to mimic inline-block on block elements */

        *display: inline;

        *zoom: 1;

    }


    Lorsque l'on veut généraliser une classe, on n'utilise pas les ID mais on cible classe et élément pour pouvoir réutiliser le style et réduire de même la longueur du code CSS en évitant de le dupliquer


    3. Module

    Il est à l'intérieur des composants de la mise en page. Chaque module est  "modifié" dans le but de faire exister un composant de manière autonome.

    Il faut faire attention de ne pas créer plusieurs styles différents pour des modules qui peuvent avoir la même fonctionnalité au risque d'écraser leurs styles.

    Partir sur une structure modulaire est une bonne pratique à appliquer pour créer et maintenir un CSS flexible et réutilisable. A titre d’exemple, les modules les plus classiques sont: la navigation et les boutons.


4. Etat

    Il s’agit de classes qui viennent définir un état particulier dans lequel se trouvent les éléments.

    Généralement, une règle qui se trouve dans cette catégorie correspond à une simple classe CSS.

    En effet, ce genre de règles déterminent un état final du design, qui doit s’appliquer quoiqu’il advienne. Si le code est "propre", on ne doit pas avoir deux états s’appliquant sur le même élément et modifiant les mêmes attributs.


    .tab {

        background-color: purple;

        color: white;

    }


    .is-tab-active {

        background-color: white;

        color: black;

    }


5.Theme

    Parfois dans un projet peut comporter différents thèmes qui peuvent etre changés en fonction des choix de l'utilisateur ou de l'équipe.

    Alors on peut décupler l'apparence de la structure des modules pour pouvoir changer facilement de designs.

    l'idée est donc de séparer les règles qui définissent le thème dans un fichier CSS relatif au thème.


    Exemple: 

        

    .theme-ocean {

        font-family: "Roboto", sans-serif;}


    .theme-ocean header {

        background-color: #33F;

        color: #A66105;}




    # Aspects de SMACCS


    ## Profondeur d'application

    Dans un style commun tel que :

    #sidebar div {

        border: 1px solid #333;

    }


    #sidebar div h3 { 

        margin-top: 5px;

    }


    #sidebar div ul {

        margin-bottom: 5px; 

    } 

    On arrive facilement à voir la structure de la page, mais en conséquence, le style ne sera pas réutilisable lorsque l'on change la structure de la page.


    Sur un code comme celui-ci :

    #sidebar div, #footer div {

        border: 1px solid #333;

    }


    #sidebar div h3, #footer div h3 { 

        margin-top: 5px;

    }


    #sidebar div ul, #footer div ul {

        margin-bottom: 5px; 

    } 

    On peut diminuer la profondeur de champ en partant de la div à laquelle on va ajouter une classe (.pod):

    .pod {

        border: 1px solid #333;

    }


    .pod > h3 { 

        margin-top: 5px;

    }


    .pod > ul {

        margin-bottom: 5px; 

    } 

    L'avantage de ce style est de pouvoir être réutilisable dans d'autre cas comme les templates mustache par exemple :

    <div class="pod">

        <h3>{{heading}}</h3>

        <ul>

            {{#items}}

            <li>{{item}}</li>

            {{/items}}

        </ul>

    </div> 


    Il faut essayer de trouver un équilibre entre maintenance, performance et lisibilité. Le principe est de ne pas appliquer de classes inutiles et de les utiliser à des endroits pertinents. Afin de rendre le code plus ouvert et flexible.


    On peut aussi dupliquer les règles :

    .pod > ul, .pod > ol, .pod > div {

        margin-bottom: 5px; 

    } 


    Ou simplifier en classifiant pour réutiliser le style par exemple :

    .pod-body {

        margin-bottom: 5px; 

    } 

    À l'intérieur de ce template

    <div class="pod">

        <h3>{{heading}}</h3>

        <ul class="pod-body">

            {{#items}}

            <li>{{item}}</li>

            {{/items}}

        </ul>

    </div> 


    ## Performance des sélecteurs

    Pour optimiser la performance de rendu de la page, il faut comprendre la façon dont est lu le code par le navigateur, le HTML est évalué comme un flux de données, et chaque élément peut commencer à être traîté alors que le serveur n'a pas encore envoyé tout le document. Exemple :

    <body>

       <div id="content">

          <div class="module intro">

             <p>Lorem Ipsum</p>

          </div>

          <div class="module">

             <p>Lorem Ipsum</p>

             <p>Lorem Ipsum</p>

             <p>Lorem Ipsum <span>Test</span></p>

          </div>

       </div>

    </body>

    Lorsque le navigateur arrive sur la première ligne <body>, rien d'autre n'existe pour lui et il va aller chercher le style CSS qui lui correspond, puis il descend sur la ligne <div id="content"> et fait pareil, il va chercher le CSS qui correspond. Et ceci jusqu'à la fin du document.


    Le CSS est lu de droite à gauche par exemple :

    body div#content p { color: #003366; }

    Le navigateur va chercher un élément <p>, puis va vérifier s'il est contenu dans un élément <div id="content">, puis s'il le trouve, il recherche s'il est contenu dans le body. Par la suite, il applique le CSS à l'élément correspondant.


    Quelle règle appliquer ?

    En général, pour améliorer la vitesse d'exécution de la page, il est préférable d'utiliser le moins de sélecteurs possible voire un seul, selon les recommandations de Google Page Speed.

    Trois règles sont appliquées dans le cas du SMACSS :

    utiliser des sélecteurs enfant (child selectors)

    éviter les sélecteurs tags pour les éléments communs

    utiliser les classes pour les sélecteurs le plus à droite


3. Catégoires de style css

    1. Bases

    Il met en défaut le style, comme un sélecteur, à l'aide d'un element, parent ou enfant.

    Voici exemple:


    body, form   {margin: 0;     padding: 0;}

    a     {color: # 039;} 

    a: hover     {color: #    03F;}


    Pas besoin de mettre !important sur cet exemple ou d'autre style de base.

    les CSS resets servent de maintenir la cohérence d'un style, comme ça, on peut être sûr que le site ne risque pas de "bugger" en css.


    2. Mise en page

    La mise en page sert à fixer les elements, tel que le placement, etc... Bref, c'est très important pour chaque page, ainsi il permet d'être cohérent en style. Il est possible de regrouper les sélecteurs d'identité(id) pour les mettre en css

    Voici exemple:


    #header, #article, #footer     {width: 960px;     margin: auto;}

     #article     {border: #ccc solide;     border-width: 1px 0 0;}


    Généralement, les pages mineures utilisaient les sélécteurs de classe(class), car ces sélecteurs peuvent être stylisées dans des plurisieurs pages, en prenant un même classe.


4.module
un module est un composante discret de la page. Pour réduire de trop sélectionner les éléments. comment faciliter séléctionner, utilisez sans hésiter avec les "enfants" ou les "descendants". voici un exemple : 
    
                                                                                                                                                exemple du module
    
    
                                                                                    .module> h2 {
                                                                                     padding: 5px;}durée .module {    padding: 5px;}
    
    
                                                                                                                                                  styling avec élément générique : 
        
                                                                                      <div class ="FLD">
                                                                                       <span> Nom du dossier </ span></ div>/ * Le module du dossier * /.fld> durée {    padding-left: 20px;    background: url (icon.png);}
                                                                                       
                                                                                       
                                                                                       
                                                                                       
                                                                                       
                   BEM : Block, Element, Modifier
                   
                   Definition : Façon de nommer les classes en CSS .
                   

                       Block: conteneur , ce qui englobe le tout/ il représente le niveau supérieur d'une abstraction ou d'un    composant EX: .block {}

    un block c'est par exemple une en-tete, un pied de page, un bouton, la navigation...

                   Elements: c'est une partie d'un block / il représente un descendant de .block  EX:  .block__element {}
                   un element peut etre un titre dans un block d'en-tete ou un item dans un block de navigation.
                   

     Modifier : change l'état de l'élement. Donc il peut s'appliquer autant à un block qu'à un élément./ Il représente un état ou une version différente de .block. Cette propriété sert à créer des variantes pour faire des modifications minimes comme par exemple changer des couleurs. EX: .block--modifieur {}



    Exemple: 

                   

    .personne {}

    . personne--femme {}

      .personne__main {}

      .personne__main--gauche {}

      .personne__main--droite {}


Ici notre block est une personne, nous la modifions pour indiquer qu'il s'agit d'une femme.
Partant du postulat qu'il s'agit d'une femme. Nous ajoutons ensuite l'element main de femme(personne). Puis nous modifions cet élément pour indiquer que nous parlons de la main gauche, puis en dessous de la main droite.

> Attention, l'indentation est importante en fonction du block.

Les blocks et les éléments doivent avoir un nom unique, qui sera utilisé comme class CSS.
Les sélecteurs CSS ne doivent pas utiliser les noms des éléments HTML


                   
                   1. Méthodologie BEM

                       IL permet de faciliter le travail du développement en équipe.

                   2. Outils BEM

                       Les outils BEM peuvent faire:

    -créer des entités

    -construire la construction finale de l'exution

    -gérer des constructions par des déclarations, comme tel que fusionner, soustraire et crosier entre eux, etc...

    -construire l'ensemble de projet en utilisant ## bem make ##(commande)

    -lancer un serveur du développeur sur la source des projets en utilsiant ## bem server ##(commande)


                   
                   
                SASS : “syntactically awesome style sheets”
Syntaxe appellée SCSS.
